package-fragment kotlin.coroutines

@kotlin.SinceKotlin(version = "1.1") public interface Continuation</*0*/ in T> {
    public abstract fun resume(/*0*/ value: T): kotlin.Unit
    public abstract fun resumeWithException(/*0*/ exception: kotlin.Throwable): kotlin.Unit
}

@kotlin.SinceKotlin(version = "1.1") public interface ContinuationDispatcher {
    public open fun </*0*/ T> dispatchResume(/*0*/ value: T, /*1*/ continuation: kotlin.coroutines.Continuation<T>): kotlin.Boolean
    public open fun dispatchResumeWithException(/*0*/ exception: kotlin.Throwable, /*1*/ continuation: kotlin.coroutines.Continuation<*>): kotlin.Boolean
}

@kotlin.SinceKotlin(version = "1.1") @kotlin.annotation.Target(allowedTargets = {AnnotationTarget.CLASS}) @kotlin.annotation.Retention(value = AnnotationRetention.BINARY) public final annotation class RestrictsSuspension : kotlin.Annotation {
    /*primary*/ public constructor RestrictsSuspension()
}
