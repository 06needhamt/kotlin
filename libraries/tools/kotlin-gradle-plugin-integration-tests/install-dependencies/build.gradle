plugins {
    id 'maven-publish'
}

configurations { toInstall { transitive = true } }

dependencies {
    toInstall "junit:junit:4.12"
}

def configurationsToInstall = [configurations.toInstall,
                               project(":kotlin-gradle-plugin").configurations.runtimeClasspath]

def artifactsToInstall = configurationsToInstall.collect { config ->
    config.resolvedConfiguration
            .resolvedArtifacts
            .findAll { !it.file.absoluteFile.toPath().startsWith(rootDir.absoluteFile.toPath()) }
}.flatten()

publishing {
    publications {
        artifactsToInstall.each { resolvedArtifact ->
            def id = resolvedArtifact.moduleVersion.id
            "${id.group}${id.name.capitalize()}${id.version}"(MavenPublication) {
                artifact resolvedArtifact.file
                groupId id.group
                artifactId id.name
                version id.version
                def pomFile = findPom(id.version, resolvedArtifact.file)
                if (pomFile != null) {
                    pom.withXml {
                        asString().append(pomFile.text)
                    }
                }
            }
        }
    }
}

File findPom(def artifactVersion, File jar) {
    def pomName = jar.name.replace(".jar", ".pom")

    // Try to get POM from Gradle cache, which stores POM in a sibling directory to that of JAR:
    if (jar.parentFile?.parentFile?.name == artifactVersion) {
        File result = jar.parentFile.parentFile.listFiles().findResult { subDir ->
            def pom = new File(subDir, pomName)
            return pom.exists() ? pom : null
        }
        if (result != null) {
            return result
        }
    }

    def sameDirPom = new File(jar.parentFile, pomName)
    if (sameDirPom.exists()) {
        return sameDirPom
    }

    return null
}